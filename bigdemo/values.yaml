messageapp:
  replicaCount: 1
  pullPolicy: IfNotPresent
  image: eu.gcr.io/dcos-145910/messageapp
  service:
    type: ClusterIP
    externalPort: 80
  resources: {}
  rabbitmq:
    exchange: messageExchange

messagebackend:
  replicaCount: 1
  pullPolicy: IfNotPresent
  image: eu.gcr.io/dcos-145910/messagebackend
  service:
    type: ClusterIP
    externalPort: 80
  resources: {}

messageredisconsumer:
  replicaCount: 1
  pullPolicy: IfNotPresent
  image: eu.gcr.io/dcos-145910/messageredisconsumer
  service:
    type: ClusterIP
    externalPort: 80
  resources: {}
  rabbitmq:
    queue: redisqueue

ui2:
  replicaCount: 1
  pullPolicy: IfNotPresent
  image: eu.gcr.io/dcos-145910/ui2
  service:
    type: ClusterIP
    externalPort: 80
  resources: {}

ingress:
  enabled: true
  # Used to create an Ingress record.
  host: localhost
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

rabbitmq:
  rabbitmq:
    user: user
    password: user
    erlangCookie: cookie

redis:
  password: redis
  persistence:
    enabled: false
  slave:
    serviceType: ClusterIP
    readinessProbe:
      initialDelaySeconds: 60
    livenessProbe:
      initialDelaySeconds: 60
  master:
    disableCommands: ""
    serviceType: ClusterIP
    readinessProbe:
      initialDelaySeconds: 60
    livenessProbe:
      initialDelaySeconds: 60